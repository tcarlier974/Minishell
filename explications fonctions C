Fonctions C - Explication Simple
Gestion de la ligne de commande
readline : Lit une ligne depuis le terminal avec gestion de l'historique et édition
rl_clear_history : Efface l'historique des commandes stocké par readline
rl_on_new_line : Indique à readline qu'on est sur une nouvelle ligne
rl_replace_line : Remplace le contenu de la ligne courante dans readline
rl_redisplay : Rafraîchit l'affichage de la ligne dans le terminal
add_history : Ajoute une ligne à l'historique des commandes
Entrées/Sorties standard
printf : Affiche du texte formaté sur la sortie standard
write : Écrit des données vers un descripteur de fichier
read : Lit des données depuis un descripteur de fichier
Gestion mémoire
malloc : Alloue dynamiquement de la mémoire
free : Libère la mémoire précédemment allouée
Manipulation de fichiers
access : Vérifie les permissions d'accès à un fichier
open : Ouvre un fichier et renvoie un descripteur
close : Ferme un descripteur de fichier
unlink : Supprime un fichier
stat/lstat/fstat : Obtient des informations sur un fichier
Processus et signaux
fork : Crée un nouveau processus (clone du processus parent)
wait/waitpid/wait3/wait4 : Attend qu'un processus fils se termine
signal : Configure le traitement d'un signal
sigaction : Configure le traitement d'un signal de façon plus détaillée
sigemptyset : Initialise un ensemble de signaux comme vide
sigaddset : Ajoute un signal à un ensemble de signaux
kill : Envoie un signal à un processus
exit : Termine le processus courant
Navigation et informations systèmes
getcwd : Obtient le répertoire de travail courant
chdir : Change le répertoire de travail courant
Exécution de programmes
execve : Remplace le processus courant par un nouveau programme
Redirection et pipes
dup/dup2 : Duplique un descripteur de fichier
pipe : Crée un tube de communication entre processus
Répertoires
opendir : Ouvre un flux de répertoire
readdir : Lit une entrée du répertoire
closedir : Ferme un flux de répertoire
Gestion d'erreurs
strerror : Renvoie une description textuelle d'un code d'erreur
perror : Affiche un message d'erreur basé sur la variable globale errno
Terminal et contrôle
isatty : Vérifie si un descripteur correspond à un terminal
ttyname : Renvoie le nom du terminal
ttyslot : Renvoie l'index d'entrée dans le fichier ttys
ioctl : Contrôle les périphériques
getenv : Récupère la valeur d'une variable d'environnement
tcsetattr/tcgetattr : Configure/récupère les attributs du terminal
Termcap/Terminfo (bibliothèque pour manipuler les terminaux)
tgetent : Charge les capacités d'un terminal
tgetflag : Récupère un drapeau booléen du terminal
tgetnum : Récupère une valeur numérique du terminal
tgetstr : Récupère une chaîne de capacité du terminal
tgoto : Génère une séquence de positionnement du curseur
tputs : Envoie une chaîne de contrôle au terminal



Utilisation
Après la création du tube, un processus peut écrire des données via pipefd[1] pendant qu'un autre lit ces données via pipefd[0]. Le canal est typiquement utilisé entre processus liés, par exemple après un fork.

Flux unidirectionnel
Le tube est unidirectionnel : les données peuvent circuler dans un seul sens. Pour une communication bidirectionnelle, il faut créer deux tuyaux.

Blocage et non-bloquant
Par défaut, si aucun processus n'écrit, la lecture sur pipefd[0] bloque. Il est possible de configurer les descripteurs en mode non bloquant.

Fermeture
Chaque processus doit fermer le descripteur qu'il n'utilise pas pour éviter les blocages ou les fuites de ressources.



